# -*- coding: utf-8 -*-
"""Final-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bCoRfHetNPpIOTBE9Frp9aD2K9u0kcF0
"""

#loading dataset
import pandas as pd
df=pd.read_csv("/content/penguins_classification.csv")
df.head()

#shape of the dataset
df.shape

#finding null values
df.isnull().sum()

#finding duplicate rows
df.duplicated().sum()

df.info()

X = df.drop('species', axis=1)
y = df['species']

df.describe()

#detecting outliers
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(16,7))
sns.boxplot(df)
plt.show()

import pandas as pd
import numpy as np
from scipy.stats import zscore

# Convert all columns to numeric type
df = df.apply(pd.to_numeric, errors='coerce')

#detecting outlier
import numpy as np
from scipy.stats import zscore
threshold = 3.0
z_scores = zscore(df)
outliers = np.abs(z_scores) > threshold
df = df[~outliers]

df.isnull().sum()

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy="mean")

df["bill_length_mm"] = imputer.fit_transform(df[["bill_length_mm"]])
df["bill_depth_mm"] = imputer.fit_transform(df[["bill_depth_mm"]])

from sklearn.preprocessing import LabelEncoder

# Create a LabelEncoder object
le = LabelEncoder()

# Encode categorical columns
categorical_columns = ["species", "island"]
for column in categorical_columns:
    df[column] = le.fit_transform(df[column])

# Print the first few rows of the DataFrame
df.head()

plt.figure(figsize=(15,8))
sns.heatmap(df.corr(),cmap="viridis",annot=True)

sns.pairplot(df,y_vars="species")

x=df.drop(columns="body_mass_g")
y=df["body_mass_g"]

# Splitting the dataset into training and test set.
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.25, random_state=0)

#feature Scaling
from sklearn.preprocessing import StandardScaler
st_x= StandardScaler()
x_train= st_x.fit_transform(x_train)
x_test= st_x.transform(x_test)

#Fitting Decision Tree classifier to the training set
from sklearn.ensemble import RandomForestClassifier
classifier= RandomForestClassifier(criterion="entropy")
classifier.fit(x_train, y_train)

#Predicting the test set result
y_pred= classifier.predict(x_test)

#Creating the metrics of the model
from sklearn.metrics import accuracy_score,confusion_matrix, classification_report
print("Accuracy Score: ",accuracy_score(y_test,y_pred))
cm= confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10,5))
sns.heatmap(cm,annot=True,cmap="viridis")
plt.plot()
print("Classification Report: ")
print(classification_report(y_test,y_pred))
print("Confusion Matrix")